package org.opentestsystem.ap.irj.service;

import java.util.HashMap;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.irj.model.ReportError;
import org.opentestsystem.ap.irj.model.ReportSummary;
import org.opentestsystem.ap.irj.util.TestUtil;

import static org.opentestsystem.ap.irj.service.ItemReportManager.REPORT_TEMPLATE;

public class ItemReportManagerTest {

    private ItemReportManager manager;

    private TestUtil testUtil = new TestUtil();

    private StringAssembler reportSummaryAssembler;

    @Before
    public void setup() {
        reportSummaryAssembler = testUtil.getReportSummaryAssembler();
    }

    @Test
    public void itShouldGenerateJobSummary() {
        final ReportSummary summary = new ReportSummary();
        summary.setJobExecutionTime(jobEx());

        summary.setTotalCount(50);
        summary.setSuccessfulCount(45);

        summary.getErrors().add(new ReportError("123","The json file is missing"));
        summary.getErrors().add(new ReportError("456789","Could not find the branch in GitLab"));
        summary.getErrors().add(new ReportError("987","ABC is a song followed by 123"));
        summary.getErrors().add(new ReportError("10203948","There is something very wrong here"));
        summary.getErrors().add(new ReportError(null, "Error writing the report results to the report file"));
        summary.getErrors().add(new ReportError(null, "Unable to retrieve data"));

        final Map<String, Object> input = new HashMap<>();
        input.put("summary", summary);

        final String reportSummaryString = reportSummaryAssembler.generate(REPORT_TEMPLATE, input);
        System.out.println(reportSummaryString);
    }

    private ReportSummary.ExecutionTime jobEx() {
        DateTime dtm = DateTime.now();

        final ReportSummary.ExecutionTime ex = new ReportSummary.ExecutionTime();
        ex.setStart(dtm.getMillis());
        ex.setEnd(dtm.plusMinutes(30).getMillis());

        return ex;
    }
}

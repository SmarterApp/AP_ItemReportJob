package org.opentestsystem.ap.irj.util;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.model.ValidationResult;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.irj.model.ItemReport;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.common.model.ItemConstants.CellType.CELL_TYPE_ANSWER;
import static org.opentestsystem.ap.common.model.ItemConstants.CellType.CELL_TYPE_LABEL;
import static org.opentestsystem.ap.irj.util.ReportUtil.countAnswerCells;

public class ReportUtilTest {

    final CsvMapper mapper = new CsvMapper();

    final CsvSchema schema = mapper.schemaFor(ItemReport.class).withoutHeader();

    private TestUtil testUtil = new TestUtil();

    private List<ValidationResult> validationResults;

    @Before
    public void setup() {
        validationResults = testUtil.readValidationResults();
    }

    @Test
    public void itShouldMapEbsrITem() throws IOException {
        final EbsrItem item = testUtil.readEbsrItem();
        final String csv = toCsvString(item);
        out(csv);
        assertReport(item, csv);
    }

    @Test
    public void itShouldMapEqITem() throws IOException {
        final EqItem item = testUtil.readEqItem();
        final String csv = toCsvString(item);
        out(csv);
        assertReport(item, csv);
    }

    @Test
    public void itShouldMapMcITem() throws IOException {
        final McItem item = testUtil.readMcItem();
        final String csv = toCsvString(item);
        out(csv);
        assertReport(item, csv);
    }

    @Test
    public void itShouldMapMiITem() throws IOException {
        final MiItem item = testUtil.readMiItem();
        final String csv = toCsvString(item);
        out(csv);
        assertReport(item, csv);
    }

    @Test
    public void itShouldMapMsITem() throws IOException {
        final MsItem item = testUtil.readMsItem();
        final String csv = toCsvString(item);
        out(csv);
        assertReport(item, csv);
    }

    @Test
    public void itShouldMapSaITem() throws IOException {
        final SaItem item = testUtil.readSaItem();
        final String csv = toCsvString(item);
        out(csv);
        assertReport(item, csv);
    }

    @Test
    public void itShouldMapStimulus() throws IOException {
        final StimItem item = testUtil.readStimulus();
        final String csv = toCsvString(item);
        out(csv);
        assertReport(item, csv);
    }

    @Test
    public void itShouldMapTutITem() throws IOException {
        final TutItem item = testUtil.readTutItem();
        final String csv = toCsvString(item);
        out(csv);
        assertReport(item, csv);
    }

    @Test
    public void itShouldMapTiITem() throws IOException {
        final TiItem item = testUtil.readTiItem();
        final String csv = toCsvString(item);
        out(csv);
        assertReport(item, csv);
    }

    @Test
    public void itShouldMapWerITem() throws IOException {
        final WerItem item = testUtil.readWerItem();
        final String csv = toCsvString(item);
        out(csv);
        assertReport(item, csv);
    }

    private String toCsvString(final Item item) {
        final ObjectWriter writer = mapper.writer(schema);
        final ItemReport itemReport = ReportUtil.newItemReport(item, validationResults);
        return ReportUtil.toString(writer, itemReport);
    }

    private void assertReport(final Item item, final String csv) {
        assertThat(csv).contains(item.getType(), item.getId());
    }

    private void out(final String csv) {
        System.out.println(csv);
    }

    @Test
    public void itShouldCountAnswerCells() {
        final TiItem item = testUtil.newTiItem();

        final Table table = item.getCore().getTable();

        final AtomicBoolean check = new AtomicBoolean(false);

        table.getRows().stream().forEach(row -> {
            row.getCells().stream().forEach(cell -> {
                if (check.get()) {
                    cell.setType(CELL_TYPE_ANSWER);
                } else {
                    cell.setType(CELL_TYPE_LABEL);
                }
                check.set(!check.get());
            });
        });
        assertThat(countAnswerCells(table)).isEqualTo(4);

        table.getRows().stream().forEach(row -> {
            row.getCells().stream().forEach(cell -> {
                cell.setType(CELL_TYPE_ANSWER);
            });
        });
        assertThat(countAnswerCells(table)).isEqualTo(8);

        table.getRows().stream().forEach(row -> {
            row.getCells().stream().forEach(cell -> {
                cell.setType(CELL_TYPE_LABEL);
            });
        });
        assertThat(countAnswerCells(table)).isEqualTo(0);
    }
}

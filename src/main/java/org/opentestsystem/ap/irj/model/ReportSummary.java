package org.opentestsystem.ap.irj.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import lombok.Data;
import lombok.Getter;

import static java.util.stream.Collectors.toList;

@Data
public class ReportSummary {

    private List<ReportError> errors = new ArrayList<>(0);

    private ExecutionTime jobExecutionTime = new ExecutionTime();

    private ExecutionTime initializeTime = new ExecutionTime();

    private ExecutionTime lookupTime = new ExecutionTime();

    private ExecutionTime loadTime = new ExecutionTime();

    private ExecutionTime generateTime = new ExecutionTime();

    private ExecutionTime writeTime = new ExecutionTime();

    private int totalCount;

    private int successfulCount;

    public Date getStartTime() {
        return new Date(jobExecutionTime.getStart());
    }

    public Date getEndTime() {
        return new Date(jobExecutionTime.getEnd());
    }

    public double getExecutionTime() {
        return jobExecutionTime.timeInSeconds();
    }

    public int getTotalErrorCount() {
        return errors.size();
    }

    public int getItemErrorCount() {
        return (int) errors.stream().filter(error -> error.getItemId() != null).count();
    }

    public int getGeneralErrorCount() {
        return (int) errors.stream().filter(error -> error.getItemId() == null).count();
    }

    public List<ReportError> getItemErrors() {
        final List<ReportError> itemErrors = errors.stream().filter(error -> error.getItemId() != null).collect(toList());
        itemErrors.sort((p1, p2) -> Integer.valueOf(p1.getItemId()).compareTo(Integer.valueOf(p2.getItemId())));
        return itemErrors;
    }

    public List<ReportError> getGeneralErrors() {
        final List<ReportError> itemErrors = errors.stream().filter(error -> error.getItemId() == null).collect(toList());
        itemErrors.sort((p1, p2) -> p1.getMessage().compareTo(p2.getMessage()));
        return itemErrors;
    }

    @Data
    @Getter
    public static class ExecutionTime {

        private long start;

        private long end;

        public void start() {
            start = System.currentTimeMillis();
        }

        public void stop() {
            end = System.currentTimeMillis();
        }

        public double timeInSeconds() {
            return (end - start) / 1000.0;
        }
    }
}

package org.opentestsystem.ap.irj.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Date;
import java.util.List;
import java.util.function.Predicate;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.common.model.ValidationResult;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.irj.config.ApplicationProperties;
import org.opentestsystem.ap.irj.model.LoadResult;
import org.opentestsystem.ap.irj.model.ReportError;
import org.opentestsystem.ap.irj.repository.ReportRepository;
import org.springframework.stereotype.Component;

import static java.util.stream.Collectors.toList;

@Slf4j
@Component
public class ItemReportService {

    private final ItemBankSystemUser systemUser;

    private final ApplicationProperties applicationProperties;

    private final ItemBankProperties itemBankProperties;

    private final ItemRepository itemRepository;

    private final ReportRepository reportRepository;

    public ItemReportService(final ApplicationProperties applicationProperties,
                             final ItemBankProperties itemBankProperties,
                             final ItemRepository itemRepository,
                             final ReportRepository reportRepository) {
        this.applicationProperties = applicationProperties;
        this.itemBankProperties = itemBankProperties;
        this.itemRepository = itemRepository;
        this.reportRepository = reportRepository;

        this.systemUser = new ItemBankSystemUser(
            applicationProperties.getSystemUserName(), applicationProperties.getSystemFullName());
    }

    // ------------------------------------------------------------------------

    /**
     * Returns the folders in the local base directory.  Only the first level of folders are returned, so only the
     * children of the local base dir.
     *
     * @return A list of folders in the local base directory.
     */
    public List<Path> findFoldersInLocalItemBank() {
        final Path rootPath = Paths.get(itemBankProperties.getLocalBaseDir());
        try {
            log.debug("findFoldersInLocalItemBank: base folder {}", itemBankProperties.getLocalBaseDir());
            return Files.walk(rootPath, 1).filter(Files::isDirectory).collect(toList());
        } catch (IOException e) {
            throw new SystemException("Error getting folders in local item bank", e);
        }
    }

    // -------------------------------------------------------------------------
    public void deleteLocalItemBank() {
        final Path rootPath = Paths.get(itemBankProperties.getLocalBaseDir());
        try {
            Files.walk(rootPath, 1)
                .filter(Files::isDirectory)
                .filter(isPathNotEqual(rootPath))
                .forEach(RepositoryUtil::deleteDirectory);
        } catch (IOException e) {
            log.debug("deleteLocalItemBank: path {},  {}", rootPath.toString(), e.getMessage());
        }
    }

    /**
     * If the path last modified date is before the given date true is returned.  False otherwise.
     *
     * @param date The date to compare the path last modified data against.
     * @return If the path last modified date is before the given date true is returned.  False otherwise.
     */
    private Predicate<Path> isFolderOlderThan(final Date date) {
        return path -> path.toFile().lastModified() < date.getTime();
    }

    /**
     * If the paths are not equal then true is returned.
     *
     * @param pathToCompare The path to compare.
     * @return True if the two paths are not equal.
     */
    private Predicate<Path> isPathNotEqual(final Path pathToCompare) {
        return path -> !StringUtils.equals(pathToCompare.toString(), path.toString());
    }

    // -------------------------------------------------------------------------

    /**
     * Create the report lock.
     */
    public void acquireReportLock() {
        reportRepository.initialize(systemUser);
        boolean isLocked = reportRepository.lockReportRepo(systemUser);
        if (!isLocked) {
            throw new SystemException("Cannot acquire lock");
        }
    }

    /**
     * Returns the item ids of all the items in the item bank.
     *
     * @return A list of item ids.
     */
    public List<String> findAllItemNames() {
        return itemRepository.findAllItemNames();
    }

    public final List<LoadResult> loadItems() {
        final List<String> items = findAllItemNames();
        return loadItems(items);
    }

    public List<LoadResult> loadItems(final List<String> itemIds) {
        return itemIds.stream().map(itemId -> loadItem(itemId)).collect(toList());
    }

    public LoadResult loadItem(final String itemId) {
        final GitClient client = itemRepository.openRepository(systemUser, itemId);

        Item item = null;
        List<ValidationResult> validationResults = null;
        ReportError error = null;
        try {
            item = client.readModelFile();
            validationResults = client.readValidationFile();
        } catch (Exception e) {
            error = new ReportError(itemId, ExceptionUtils.getRootCauseMessage(e));
        }

        final LoadResult result = new LoadResult(item, validationResults, error);
        return result;
    }

    public void releaseReportLock() {
        reportRepository.unlockReportRepo(systemUser);
    }
}

package org.opentestsystem.ap.irj.service;

import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import freemarker.template.TemplateExceptionHandler;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.irj.config.ApplicationProperties;
import org.opentestsystem.ap.irj.model.ItemReport;
import org.opentestsystem.ap.irj.model.LoadResult;
import org.opentestsystem.ap.irj.model.ReportError;
import org.opentestsystem.ap.irj.model.ReportSummary;
import org.opentestsystem.ap.irj.repository.ReportRepository;
import org.opentestsystem.ap.irj.util.ReportUtil;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toList;
import static org.opentestsystem.ap.irj.util.ReportUtil.generateReportFileName;
import static org.opentestsystem.ap.irj.util.ReportUtil.generateReportSummaryFileName;

/**
 * Not thread safe.
 */
@Slf4j
@Component
@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class ItemReportManager {

    public static final String REPORT_TEMPLATE = "report-summary.ftl";

    // ------------------------------------------------------------------------

    private final CsvMapper mapper = new CsvMapper();

    private final CsvSchema schema = mapper.schemaFor(ItemReport.class).withHeader();

    private final ApplicationProperties applicationProperties;

    private final ItemReportService reportService;

    private final ReportRepository reportRepository;

    private final StringAssembler reportSummaryAssembler;

    private final ItemBankSystemUser systemUser;

    // ------------------------------------------------------------------------

    private Path reportRepo;

    private String reportFileName;

    private Path reportFile;

    private String reportSummaryFileName;

    private Path reportSummaryFile;

    private ReportSummary summary = new ReportSummary();

    private List<String> itemIds = new ArrayList<>(0);

    private List<LoadResult> loadResults = new ArrayList<>(0);

    private List<ItemReport> itemReportList = new ArrayList<>(0);

    private final List<ReportError> errors = new ArrayList<>(1024);

    // ------------------------------------------------------------------------

    public ItemReportManager(final ApplicationProperties applicationProperties,
                             final ItemReportService reportService,
                             final ReportRepository reportRepository) {
        this.applicationProperties = applicationProperties;
        this.reportService = reportService;
        this.reportRepository = reportRepository;

        this.systemUser = new ItemBankSystemUser(
            applicationProperties.getSystemUserName(), applicationProperties.getSystemFullName());

        this.reportSummaryAssembler = newReportSummaryAssembler();
    }

    // ------------------------------------------------------------------------

    public void execute() {
        log.debug("Job start");
        summary.getJobExecutionTime().start();

        initialize();
        lookupItems();
        loadItemsAsync();
        generateReport();
        writeReport();

        summary.getJobExecutionTime().stop();

        writeSummary();
        publish();

        log.info("Job completed in {} seconds", summary.getJobExecutionTime().timeInSeconds());
    }

    // ------------------------------------------------------------------------

    private void initialize() {
        log.debug("Initializing");
        summary.getInitializeTime().start();
        reportRepo = reportRepository.initialize(systemUser);
        reportFile = generateReportFile(reportRepo);
        reportSummaryFile = generateReportSummaryFile(reportRepo);
        summary.getInitializeTime().stop();
        log.info("Initializing report completed in {} seconds", summary.getInitializeTime().timeInSeconds());
    }

    private void lookupItems() {
        log.debug("Looking up items");
        summary.getLookupTime().start();
        itemIds = reportService.findAllItemNames();
        summary.getLookupTime().stop();
        summary.setTotalCount(itemIds.size());
        log.info("Looking up items completed in {} seconds", summary.getLookupTime().timeInSeconds());
    }

    private void loadItemsAsync() {
        log.debug("Loading items async");
        summary.getLoadTime().start();

        final List<CompletableFuture<LoadResult>> futuresList = itemIds.stream().map(id ->
            reportService.loadItemAsync(id)).collect(toList());

        loadResults = futuresList.stream().map(CompletableFuture::join).collect(Collectors.toList());

        addErrors(loadResults);

        summary.getLoadTime().stop();
        log.info("Loading items async completed in {} seconds", summary.getLoadTime().timeInSeconds());
    }

    private void generateReport() {
        log.debug("Generating report data");
        summary.getGenerateTime().start();
        try {
            itemReportList = loadResults.stream().map(ReportUtil::newItemReport).collect(toList());
        } catch (Exception e) {
            errors.add(new ReportError(null, ExceptionUtils.getRootCauseMessage(e)));
        }
        summary.getGenerateTime().stop();
        log.info("Report data generation completed in {} seconds", summary.getGenerateTime().timeInSeconds());
    }

    private void writeReport() {
        log.debug("Writing report");
        summary.getWriteTime().start();
        try {
            ReportUtil.writeReport(reportFile.toFile(), mapper.writer(schema), itemReportList);
        } catch (Exception e) {
            errors.add(new ReportError(null, ExceptionUtils.getRootCauseMessage(e)));
        }
        summary.getWriteTime().stop();
        log.info("Writing report completed in {} seconds", summary.getWriteTime().timeInSeconds());
    }

    private void writeSummary() {
        summary.setErrors(errors);

        final Map<String, Object> input = new HashMap<>();
        input.put("summary", summary);

        final String reportSummaryString = reportSummaryAssembler.generate(REPORT_TEMPLATE, input);
        try {
            FileUtils.write(reportSummaryFile.toFile(), reportSummaryString, "UTF-8");
        } catch (IOException e) {
            log.error("Could not write the report summary file.", e);
        }
    }

    private void publish() {
        log.info("Publishing reports: {} and {}", reportFileName, reportSummaryFileName);
        reportRepository.publishReport(systemUser, reportFileName, reportSummaryFileName);
    }

    // ------------------------------------------------------------------------

    private void addErrors(final List<LoadResult> loadResults) {
        final List<ReportError> reportErrors = loadResults.stream()
            .filter(LoadResult::hasError)
            .map(LoadResult::getError)
            .collect(toList());

        errors.addAll(reportErrors);
    }

    private Path generateReportFile(final Path reportRepo) {
        reportFileName = generateReportFileName();
        final Path path = Paths.get(reportRepo.toString(), reportFileName);
        createNewFile(path);
        return path;
    }

    private Path generateReportSummaryFile(final Path reportRepo) {
        reportSummaryFileName = generateReportSummaryFileName();
        final Path path = Paths.get(reportRepo.toString(), reportSummaryFileName);
        createNewFile(path);
        return path;
    }

    private void createNewFile(final Path filePath) {
        log.debug("createNewFile: {}", filePath.toString());
        final File file = filePath.toFile();
        if (file.exists()) {
            file.delete();
        }
        try {
            file.createNewFile();
        } catch (IOException e) {
            throw new SystemException(e);
        }
    }

    private StringAssembler newReportSummaryAssembler() {
        freemarker.template.Configuration freemarkerConfig = new freemarker.template.Configuration(freemarker
            .template.Configuration.VERSION_2_3_25);

        freemarkerConfig.setClassForTemplateLoading(this.getClass(), applicationProperties.getReportTemplateFolder());

        freemarkerConfig.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarkerConfig.setDefaultEncoding("UTF-8");

        final StringAssembler assembler = new StringAssembler(freemarkerConfig);
        return new StringAssembler(freemarkerConfig);
    }

}

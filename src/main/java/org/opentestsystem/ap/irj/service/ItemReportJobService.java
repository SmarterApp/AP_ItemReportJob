package org.opentestsystem.ap.irj.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.repository.ReportRepository;
import org.opentestsystem.ap.common.util.SystemException;
import org.opentestsystem.ap.irj.config.ApplicationProperties;
import org.springframework.stereotype.Component;

import static java.util.stream.Collectors.toList;

@Slf4j
@Component
public class ItemReportJobService {

    private final ItemBankSystemUser systemUser;

    private final ApplicationProperties applicationProperties;

    private final ItemBankProperties itemBankProperties;

    private final ItemRepository itemRepository;

    private final ReportRepository reportRepository;

    public ItemReportJobService(final ApplicationProperties applicationProperties,
                                final ItemBankProperties itemBankProperties,
                                final ItemRepository itemRepository,
                                final ReportRepository reportRepository) {
        this.applicationProperties = applicationProperties;
        this.itemBankProperties = itemBankProperties;
        this.itemRepository = itemRepository;
        this.reportRepository = reportRepository;

        this.systemUser = new ItemBankSystemUser(
            applicationProperties.getSystemUserName(), applicationProperties.getSystemFullName());
    }

    // ------------------------------------------------------------------------

    /**
     * Returns the folders in the local base directory.  Only the first level of folders are returned, so only the
     * children of the local base dir.
     *
     * @return A list of folders in the local base directory.
     */
    public List<Path> findFoldersInLocalItemBank() {
        final Path rootPath = Paths.get(itemBankProperties.getLocalBaseDir());
        try {
            log.debug("findFoldersInLocalItemBank: base folder {}", itemBankProperties.getLocalBaseDir());
            return Files.walk(rootPath, 1).filter(Files::isDirectory).collect(toList());
        } catch (IOException e) {
            throw new SystemException("Error getting folders in local item bank", e);
        }
    }

    /**
     * Clones all items in an item bank.
     *
     * @return A list of cloned items.
     */
    public List<Item> cloneItemBank() {
        log.debug("cloneItemBank: group {}", itemBankProperties.getGroup());
        final List<String> itemNames = findAllItemNames();

        List<Item> itemPaths = Collections.emptyList();
        if (CollectionUtils.isNotEmpty(itemNames)) {
            itemPaths = itemNames.stream().map(itemId -> reportOnItem(itemId)).collect(toList());
        }
        return itemPaths;
    }

    // ------------------------------------------------------------------------

    /**
     * Create the report lock.
     */
    public void acquireReportLock() {
        reportRepository.initialize(systemUser);
        boolean isLocked = reportRepository.lockReportRepo(systemUser);
        if (!isLocked) {
            throw new SystemException("Cannot acquire lock");
        }
    }

    /**
     * Returns the item ids of all the items in the item bank.
     *
     * @return A list of item ids.
     */
    public List<String> findAllItemNames() {
        return itemRepository.findAllItemNames();
    }

    public Item reportOnItem(final String itemId) {
        final GitClient git = itemRepository.openRepository(systemUser, itemId);

        Item item = null;
        try {
            item = git.readModelFile();
        } catch (SystemException e) {
            log.info("{}", ExceptionUtils.getRootCauseMessage(e));
        }

        return item;
    }

    public void releaseReportLock() {
        reportRepository.unlockReportRepo(systemUser);
    }
}

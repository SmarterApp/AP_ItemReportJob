package org.opentestsystem.ap.irj.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SystemException;
import org.opentestsystem.ap.irj.config.ApplicationProperties;
import org.springframework.stereotype.Component;

import static java.util.stream.Collectors.toList;

@Slf4j
@Component
public class ItemReportJobService {

    private final ItemBankSystemUser itemBankUser;

    private final ApplicationProperties applicationProperties;

    private final ItemBankProperties itemBankProperties;

    private final ItemRepository itemRepository;

    public ItemReportJobService(final ApplicationProperties applicationProperties,
                                final ItemBankProperties itemBankProperties,
                                final ItemRepository itemRepository) {
        this.applicationProperties = applicationProperties;
        this.itemBankProperties = itemBankProperties;
        this.itemRepository = itemRepository;
        this.itemBankUser = new ItemBankSystemUser(
            applicationProperties.getSystemUserName(), applicationProperties.getSystemFullName());
    }

    public List<Path> cloneItemBank() {
        final List<String> itemNames = findAllItemNames();

        List<Path> itemPaths = Collections.emptyList();
        if (CollectionUtils.isNotEmpty(itemNames)) {
            itemPaths = itemNames.stream().map(itemId -> cloneItem(itemId)).collect(toList());
        }
        return itemPaths;
    }

    public Path cloneItem(final String itemId) {
        return itemRepository.attachToLocalOrCloneFromRemote(itemBankUser, itemId);
    }

    public List<String> findAllItemNames() {
        return itemRepository.findAllItemNames();
    }

    public List<Path> findFoldersInLocalItemBank() {
        log.debug("cleanupFolder: path {}, threshold {}", itemBankProperties.getLocalBaseDir());
        final Path rootPath = Paths.get(itemBankProperties.getLocalBaseDir());
        try {
            return Files.walk(rootPath, 1).filter(Files::isDirectory).collect(toList());
        } catch (IOException e) {
            throw new SystemException("Error getting folders in local item bank", e);
        }
    }
}

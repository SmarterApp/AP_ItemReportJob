package org.opentestsystem.ap.irj.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.common.model.report.ErrorMsg;
import org.opentestsystem.ap.common.model.report.ItemState;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.repository.ReportRepository;
import org.opentestsystem.ap.common.util.SystemException;
import org.opentestsystem.ap.irj.config.ApplicationProperties;
import org.opentestsystem.ap.irj.model.ItemStateReport;
import org.springframework.stereotype.Component;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;

@Slf4j
@Component
public class ItemReportJobService {

    private final ItemBankSystemUser itemBankUser;

    private final ApplicationProperties applicationProperties;

    private final ItemBankProperties itemBankProperties;

    private final ItemRepository itemRepository;

    private final ReportRepository reportRepository;

    public ItemReportJobService(final ApplicationProperties applicationProperties,
                                final ItemBankProperties itemBankProperties,
                                final ItemRepository itemRepository,
                                final ReportRepository reportRepository) {
        this.applicationProperties = applicationProperties;
        this.itemBankProperties = itemBankProperties;
        this.itemRepository = itemRepository;
        this.reportRepository = reportRepository;

        this.itemBankUser = new ItemBankSystemUser(
            applicationProperties.getSystemUserName(), applicationProperties.getSystemFullName());
    }

    // ------------------------------------------------------------------------

    public List<String> findAllItemNames() {
        return itemRepository.findAllItemNames();
    }

    public List<Path> findFoldersInLocalItemBank() {
        log.debug("findFoldersInLocalItemBank: path {}, threshold {}", itemBankProperties.getLocalBaseDir());
        final Path rootPath = Paths.get(itemBankProperties.getLocalBaseDir());
        try {
            return Files.walk(rootPath, 1).filter(Files::isDirectory).collect(toList());
        } catch (IOException e) {
            throw new SystemException("Error getting folders in local item bank", e);
        }
    }

    public List<Path> cloneItemBank() {
        final List<String> itemNames = findAllItemNames();

        List<Path> itemPaths = Collections.emptyList();
        if (CollectionUtils.isNotEmpty(itemNames)) {
            itemPaths = itemNames.stream().map(itemId -> cloneItem(itemId)).collect(toList());
        }
        return itemPaths;
    }

    // ------------------------------------------------------------------------

    public void runReport() {
        boolean isLocked = false;
        try {
            isLocked = acquireReportLock();

            if (isLocked) {
//                cloneItemBank();
                final ItemStateReport report = generateReport();
                saveReport(report);
            }

        } finally {
            releaseReportLock(isLocked);
        }
    }

    // ------------------------------------------------------------------------

    boolean acquireReportLock() {
        reportRepository.initialize(itemBankUser);
        return reportRepository.lockReportRepo(itemBankUser);
    }

    void saveReport(final ItemStateReport report) {
        reportRepository.saveReport(itemBankUser, report.getItemStates(), report.getErrors());
    }

    void releaseReportLock(final boolean isLocked) {
        if (isLocked) {
            reportRepository.unlockReportRepo(itemBankUser);
        }
    }

    // ------------------------------------------------------------------------

    ItemStateReport generateReport() {
//        cloneItemBank();

        final ItemState item1 = new ItemState();
        item1.setItemId("123");
        item1.setItemType("eq");

        final ItemState item2 = new ItemState();
        item2.setItemId("abc");
        item2.setItemType("EBSR");

        final ErrorMsg err1 = new ErrorMsg();
        err1.setItemId("987");
        err1.setMessage("The master branch does not exists");

        final ErrorMsg err2 = new ErrorMsg();
        err2.setItemId("zyx");
        err2.setMessage("The data is corrupt in the repository");

        final List<ItemState> itemStates = newArrayList(item1, item2);

        final List<ErrorMsg> errors = newArrayList(err1, err2);

        final ItemStateReport report = new ItemStateReport();
        report.setItemStates(itemStates);
        report.setErrors(errors);

        return report;
    }

    Path cloneItem(final String itemId) {
        Path path = null;
        try {
            log.debug("Cloned item {}", itemId);
            path = itemRepository.attachToLocalOrCloneFromRemote(itemBankUser, itemId);
        } catch (SystemException e) {
            log.warn("Error cloning item " + itemId, e);
        }
        return path;
    }
}

package org.opentestsystem.ap.irj.repository;

import java.nio.file.Path;
import java.util.List;

import lombok.extern.slf4j.Slf4j;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.client.GitClientFactory;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.repository.RepositoryDependencyProvider;
import org.opentestsystem.ap.irj.util.ReportUtil;
import org.springframework.stereotype.Component;

import static org.opentestsystem.ap.common.repository.RepositoryUtil.generateLocalRepoPath;

/**
 * Handles operations associated with the report repository.
 */
@Slf4j
@Component
public class ReportRepository {

    private static final String REPORT_LOCK = "report";

    private final GitClientFactory gitClientFactory;

    private final GitlabClient gitlabClient;

    private final ItemBankProperties itemBankProperties;

    private final String reportRepoName;

    private Project reportRepoProject;

    public ReportRepository(final RepositoryDependencyProvider repositoryDependencyProvider) {
        this.gitClientFactory = repositoryDependencyProvider.getGitClientFactory();
        this.gitlabClient = repositoryDependencyProvider.getGitlabClient();
        this.itemBankProperties = repositoryDependencyProvider.getItemBankProperties();
        this.reportRepoName = itemBankProperties.getReportRepoName();
    }

    // ------------------------------------------------------------------------

    public List<Path> findReportRepositoryFiles(final ItemBankSystemUser user) {
        return ReportUtil.findFilesInPath(getLocalRepoPath());
    }

    public void stageAndCommitAllFiles(final ItemBankSystemUser user) {
        deleteLocalReportRepo();

        final GitClient client = gitClientFactory.cloneRemoteRepository(user, reportRepoName);

        final List<Path> files = findReportRepositoryFiles(user);
        files.stream().forEach(file -> {
            client.stageFiles(file.toFile().getName());
            log.debug("Staged file {}", file.toFile().getName());
        });

        client.commit("Commit all files");
        client.push();
    }

    public void deleteReportRepository(final ItemBankSystemUser systemUser) {
        deleteLocalReportRepo();
    }

    // ------------------------------------------------------------------------

    public Path initialize(final ItemBankSystemUser user) {
        final Path path;
        reportRepoProject = lookupReportRepoProject();
        if (reportRepoProject == null) {
            deleteLocalReportRepo();
            reportRepoProject = createReportProject();
            path = initializeRepository(user);
        } else {
            path = cloneRepository(user);
        }
        return path;
    }

    public void publishReport(final ItemBankSystemUser user, final String reportFile, final String summaryFile) {
        log.debug("publishReport: {}", reportRepoName);
        final GitClient git = gitClientFactory.openRepository(user, reportRepoName);
        log.debug("git is pointing to local repo base dir {}", git.getLocalRepositoryPath().toString());
        git.stageFiles(reportFile);
        git.stageFiles(summaryFile);
        git.commit("Publishing new report");
        git.push();
    }

    public boolean lockReportRepo(final ItemBankUser user) {
        log.debug("lockReportRepo: lock name '{}'", REPORT_LOCK);
        return gitlabClient.lockSection(user, reportRepoProject, REPORT_LOCK);
    }

    public void unlockReportRepo(final ItemBankUser user) {
        log.debug("unlockReportRepo: lock name '{}'", REPORT_LOCK);
        gitlabClient.deleteSectionLock(reportRepoProject, REPORT_LOCK);
    }

    // ------------------------------------------------------------------------

    Project createReportProject() {
        log.debug("createReportProject: name {}", reportRepoName);
        final Project project = gitlabClient.createProject(reportRepoName);
        return project;
    }

    Path initializeRepository(final ItemBankSystemUser user) {
        final GitClient git = gitClientFactory.cloneRemoteRepository(user, reportRepoName);
        git.createRepository("Creating report repository.");
        return git.getLocalRepositoryPath();
    }

    Path cloneRepository(final ItemBankSystemUser user) {
        final GitClient git = gitClientFactory.openRepository(user, reportRepoName);
        git.checkoutMasterBranch();
        git.pullLatest();
        return git.getLocalRepositoryPath();
    }

    Project lookupReportRepoProject() {
        log.debug("lookupReportProject: name {}", reportRepoName);
        Project project = null;
        try {
            project = gitlabClient.lookupProjectByName(reportRepoName);
        } catch (ResourceNotFoundException e) {

        }
        return project;
    }

    void deleteLocalReportRepo() {
        final Path path = getLocalRepoPath();
        try {
            ReportUtil.deleteFolder(path);
        } catch (Exception e) {
            log.warn("Error deleting {}", path);
        }
    }

    Path getLocalRepoPath() {
        return generateLocalRepoPath(itemBankProperties.getLocalBaseDir(), reportRepoName);
    }
}



package org.opentestsystem.ap.irj.repository;

import java.nio.file.Path;
import java.util.List;

import com.google.common.annotations.VisibleForTesting;
import lombok.extern.slf4j.Slf4j;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.client.GitClientFactory;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.repository.RepositoryDependencyProvider;
import org.opentestsystem.ap.common.saaif.SaaifIdGenerator;
import org.springframework.stereotype.Component;

import static org.opentestsystem.ap.common.repository.RepositoryUtil.deleteDirectory;
import static org.opentestsystem.ap.common.repository.RepositoryUtil.generateErrorReportFileName;
import static org.opentestsystem.ap.common.repository.RepositoryUtil.generateLocalRepoPath;
import static org.opentestsystem.ap.common.repository.RepositoryUtil.generateReportFileName;

/**
 * Handles operations associated with the report repository.
 */
@Slf4j
@Component
public class ReportRepository {

    private static final String REPORT_LOCK = "report";

    private final GitClientFactory gitClientFactory;

    private final SaaifIdGenerator saaifIdGenerator;

    private final GitlabClient gitlabClient;

    private final ItemFactory itemFactory;

    private final ItemBankProperties itemBankProperties;

    private final String reportRepoName;

    private Project reportRepoProject;

    public ReportRepository(final RepositoryDependencyProvider repositoryDependencyProvider) {
        this.gitClientFactory = repositoryDependencyProvider.getGitClientFactory();
        this.gitlabClient = repositoryDependencyProvider.getGitlabClient();
        this.saaifIdGenerator = repositoryDependencyProvider.getSaaifIdGenerator();
        this.itemFactory = repositoryDependencyProvider.getItemFactory();
        this.itemBankProperties = repositoryDependencyProvider.getItemBankProperties();
        this.reportRepoName = itemBankProperties.getReportRepoName();
    }

    // ------------------------------------------------------------------------

    public void initialize(final ItemBankSystemUser user) {
        reportRepoProject = lookupReportRepoProject();

        if (reportRepoProject == null) {
            deleteLocalReportRepo();
            reportRepoProject = createReportRepoProject(user);
        }
    }

    public boolean lockReportRepo(final ItemBankUser user) {
        log.debug("lockReportRepo: lock name '{}'", REPORT_LOCK);
        return gitlabClient.lockSection(user , reportRepoProject, REPORT_LOCK);
    }

    public void unlockReportRepo(final ItemBankUser user) {
        log.debug("unlockReportRepo: lock name '{}'", REPORT_LOCK);
        gitlabClient.deleteSectionLock(reportRepoProject, REPORT_LOCK);
    }

    public void saveReport(final ItemBankUser user, final List<String> reportData, final List<String> errors) {
        log.debug("saveReport: open repository");
        final GitClient git = gitClientFactory.openRepository(user, reportRepoName);

        final String reportFileName = generateReportFileName();
        final String errorReportFileName = generateErrorReportFileName();

        final String reportString = "report";
        final String errorString = "error";

//        final String reportString = mapItemStateReportToString(reportData);
//        final String errorString = mapItemReportErrorsToString(errors);

        log.debug("saveReport: write report files");
        git.writeFileContentsToRepository(reportFileName,  reportString, false);
        git.writeFileContentsToRepository(errorReportFileName,  errorString, false);

        log.debug("saveReport: stage report files");
        git.stageFiles(reportFileName);
        git.stageFiles(errorReportFileName);

        log.debug("saveReport: commit");
        git.commit("Generated report for " + reportFileName);

        log.debug("saveReport: push");
        git.push();
    }

    // ------------------------------------------------------------------------

    @VisibleForTesting
    public Project createReportRepoProject(final ItemBankSystemUser user) {
        log.debug("createReportRepo: name {}", reportRepoName);
        final Project project = gitlabClient.createProject(reportRepoName);

        final GitClient git = gitClientFactory.cloneRemoteRepository(user, reportRepoName);
        git.createRepository("Created item bank reporting repository.");

        return project;
    }

    @VisibleForTesting
    Project lookupReportRepoProject() {
        log.debug("lookupReportProject: name {}", reportRepoName);
        Project project = null;
        try {
            project = gitlabClient.lookupProjectByName(reportRepoName);
        } catch (ResourceNotFoundException e) {

        }
        return project;
    }

    @VisibleForTesting
    void deleteLocalReportRepo() {
        final Path localRepoPath = generateLocalRepoPath(itemBankProperties.getLocalBaseDir(), reportRepoName);
        deleteDirectory(localRepoPath);
    }
}



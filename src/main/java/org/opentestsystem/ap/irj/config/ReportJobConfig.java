package org.opentestsystem.ap.irj.config;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.irj.repository.ReportRepository;
import org.opentestsystem.ap.irj.service.ItemReportManager;
import org.opentestsystem.ap.irj.service.ItemReportService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;

@Slf4j
@Configuration
public class ReportJobConfig {

    private final ApplicationProperties applicationProperties;

    private final ItemReportService reportService;

    private final ReportRepository reportRepository;

    public ReportJobConfig(final ApplicationProperties applicationProperties,
                           final ItemReportService reportService,
                           final ReportRepository reportRepository) {
        this.applicationProperties = applicationProperties;
        this.reportService = reportService;
        this.reportRepository = reportRepository;
    }

    @Scheduled(cron = "${tasks.reportSchedule}")
    public void generateItemReport() {
        final ItemReportManager manager = newManager();
        manager.execute();
    }

    @Bean
    public Executor asyncExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(applicationProperties.getNumberOfThreads());
        executor.setMaxPoolSize(applicationProperties.getNumberOfThreads());
        executor.setThreadNamePrefix("ReportJob-");
        executor.initialize();
        return executor;
    }

    private ItemReportManager newManager() {
        return new ItemReportManager(applicationProperties, reportService, reportRepository);
    }

}

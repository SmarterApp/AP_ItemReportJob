package org.opentestsystem.ap.irj.config;

import freemarker.template.TemplateExceptionHandler;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.irj.repository.ReportRepository;
import org.opentestsystem.ap.irj.service.ItemReportManager;
import org.opentestsystem.ap.irj.service.ItemReportService;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

@Slf4j
@EnableScheduling
@Configuration
public class ReportJobConfig {

    private final ApplicationProperties applicationProperties;

    private final ItemReportService reportService;

    private final ReportRepository reportRepository;

    private final StringAssembler reportSummaryAssembler;

    public ReportJobConfig(final ApplicationProperties applicationProperties,
                           final ItemReportService reportService,
                           final ReportRepository reportRepository) {
        this.applicationProperties = applicationProperties;
        this.reportService = reportService;
        this.reportRepository = reportRepository;
        this.reportSummaryAssembler = newReportSummaryAssembler();
    }

    @Scheduled(fixedRate = 120000, initialDelay = 0)
    public void generateItemReport() {
        final ItemReportManager manager = newManager();
        manager.execute();
    }

    public StringAssembler newReportSummaryAssembler() {
        freemarker.template.Configuration freemarkerConfig = new freemarker.template.Configuration(freemarker
            .template.Configuration.VERSION_2_3_25);

        freemarkerConfig.setClassForTemplateLoading(this.getClass(), "/report_templates");

        freemarkerConfig.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarkerConfig.setDefaultEncoding("UTF-8");

        final StringAssembler assembler = new StringAssembler(freemarkerConfig);
        return new StringAssembler(freemarkerConfig);
    }

    private ItemReportManager newManager() {
        return new ItemReportManager(applicationProperties, reportService, reportRepository, reportSummaryAssembler);
    }

}

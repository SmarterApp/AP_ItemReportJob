package org.opentestsystem.ap.irj.util;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Date;
import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.model.ValidationResult;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.irj.model.EbsrItemReport;
import org.opentestsystem.ap.irj.model.EqItemReport;
import org.opentestsystem.ap.irj.model.ItemReport;
import org.opentestsystem.ap.irj.model.McItemReport;
import org.opentestsystem.ap.irj.model.MiItemReport;
import org.opentestsystem.ap.irj.model.MsItemReport;
import org.opentestsystem.ap.irj.model.SaItemReport;
import org.opentestsystem.ap.irj.model.StimulusReport;
import org.opentestsystem.ap.irj.model.TiItemReport;
import org.opentestsystem.ap.irj.model.TutItemReport;
import org.opentestsystem.ap.irj.model.WerItemReport;

import static java.util.stream.Collectors.toList;
import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;

@Slf4j
public class ReportUtil {

    public static final String REPORT_FILE_NAME_PATTERN = "item-report-%1$tF-%1$tT.csv";

    public static final String REPORT_SUMMARY_FILE_NAME_PATTERN = "item-report-%1$tF-%1$tT.log";

    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();

    public static void deleteFolder(final Path folderToDelete) {
        try {
            FileUtils.deleteDirectory(folderToDelete.toFile());
        } catch (IOException e) {
            log.warn("Error deleting folder " + folderToDelete.toString(), e);
        }
    }

    public static List<Path> findFilesInPath(final Path rootPath) {
        log.debug("findFilesInPath: path {}", rootPath);
        try {
            return Files.walk(rootPath, 1).filter(Files::isRegularFile).collect(toList());
        } catch (IOException e) {
            throw new SystemException("Error folder in path " + rootPath, e);
        }
    }

    public static String toJsonString(final Object obj) {
        try {
            return OBJECT_MAPPER.writeValueAsString(obj);
        } catch (JsonProcessingException e) {
            throw new SystemException(e);
        }
    }

    public static void writeReport(final File file, final ObjectWriter writer, final List<ItemReport> itemReport) {
        try {
            writer.writeValue(file, itemReport);
        } catch (IOException e) {
            throw new SystemException("Error writing report", e);
        }
    }

    public static String toString(final ObjectWriter writer, final ItemReport itemReport) {
        try {
            return writer.writeValueAsString(itemReport);
        } catch (JsonProcessingException e) {
            throw new SystemException("Error converting to CSV", e);
        }
    }

    public static ItemReport newItemReport(final Item item, final String reportStatus,
                                           final List<ValidationResult> validationResults) {
        ItemReport itemReport = null;
        if (item instanceof TiItem) {
            itemReport = new TiItemReport((TiItem) item, reportStatus, validationResults);
        } else if (item instanceof MiItem) {
            itemReport = new MiItemReport((MiItem) item, reportStatus, validationResults);
        } else if (item instanceof McItem) {
            itemReport = new McItemReport((McItem) item, reportStatus, validationResults);
        } else if (item instanceof MsItem) {
            itemReport = new MsItemReport((MsItem) item, reportStatus, validationResults);
        } else if (item instanceof EbsrItem) {
            itemReport = new EbsrItemReport((EbsrItem) item, reportStatus, validationResults);
        } else if (item instanceof EqItem) {
            itemReport = new EqItemReport((EqItem) item, reportStatus, validationResults);
        } else if (item instanceof SaItem) {
            itemReport = new SaItemReport((SaItem) item, reportStatus, validationResults);
        } else if (item instanceof WerItem) {
            itemReport = new WerItemReport((WerItem) item, reportStatus, validationResults);
        } else if (item instanceof TutItem) {
            itemReport = new TutItemReport((TutItem) item, reportStatus, validationResults);
        } else if (item instanceof StimItem) {
            itemReport = new StimulusReport((StimItem) item, reportStatus, validationResults);
        }
        return itemReport;
    }

    public static int countAnswerCells(final Table table) {
        int count = 0;
        if (isNotEmpty(table.getRows())) {
            count = table.getRows().stream().map(row ->
                row.getCells().stream().filter(Table.Cell::isAnswer).collect(toList())
            ).mapToInt(List::size).sum();
        }
        return count;
    }

    public static int countCorrectAnswerCells(final Table table) {
        int count = 0;
        if (isNotEmpty(table.getRows())) {
            count = table.getRows().stream().map(row ->
                row.getCells().stream().filter(Table.Cell::isCorrectAnswer).collect(toList())
            ).mapToInt(List::size).sum();
        }
        return count;
    }

    public static String generateReportFileName() {
        return String.format(REPORT_FILE_NAME_PATTERN, new Date()).replace(':', '_');
    }

    public static String generateReportSummaryFileName() {
        return String.format(REPORT_SUMMARY_FILE_NAME_PATTERN, new Date()).replace(':', '_');
    }
}

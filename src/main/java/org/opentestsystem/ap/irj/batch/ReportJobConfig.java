package org.opentestsystem.ap.irj.batch;

import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.irj.service.ItemReportJobService;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.support.transaction.ResourcelessTransactionManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.Scheduled;

@EnableBatchProcessing
@Configuration
public class ReportJobConfig {

    public static final String JOB_ITEM_REPORT = "itemReportJob";

    public static final String STEP_ACQUIRE_LOCK = "acquireLockStep";

    public static final String STEP_RELEASE_LOCK = "releaseLockStep";

    public static final String STEP_PROCESS_ITEMS = "processItemSteps";

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

    @Autowired
    private JobLauncher jobLauncher;

    @Autowired
    private Job processJob;

    // This job runs in every 5 seconds
    @Scheduled(fixedRate = 120000, initialDelay = 120000)
    public void printMessage() {
        try {
            JobParameters jobParameters = new JobParametersBuilder().addLong(
                "time", System.currentTimeMillis()).toJobParameters();
            jobLauncher.run(processJob, jobParameters);
            System.out.println("I have been scheduled with Spring scheduler");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Bean
    public Job processJob(@Autowired final ItemReportJobService itemReportJobService) {
        return jobBuilderFactory.get(JOB_ITEM_REPORT)
            .incrementer(new RunIdIncrementer())
            .listener(listener())
            .start(acquireLockStep(itemReportJobService))
            .next(processItems(itemReportJobService))
            .next(releaseLockStep(itemReportJobService))
            .build();
    }

    @Bean
    public Step acquireLockStep(@Autowired final ItemReportJobService itemReportJobService) {
        return stepBuilderFactory.get(STEP_ACQUIRE_LOCK)
            .tasklet(new AcquireLock(itemReportJobService))
            .build();
    }

    @Bean
    public Step releaseLockStep(@Autowired final ItemReportJobService itemReportJobService) {
        return stepBuilderFactory.get(STEP_RELEASE_LOCK)
            .tasklet(new ReleaseLock(itemReportJobService))
            .build();
    }

    @Bean
    public Step processItems(@Autowired final ItemReportJobService itemReportJobService) {
        return stepBuilderFactory.get(STEP_PROCESS_ITEMS).<String, Item>chunk(1)
            .reader(new ReadItems(itemReportJobService))
            .processor(new ProcessReadItems(itemReportJobService))
            .writer(new WriteReadItems()).build();
    }

    @Bean
    public JobExecutionListener listener() {
        return new ReportJobCompletionListener();
    }

    @Bean
    public ResourcelessTransactionManager transactionManager() {
        return new ResourcelessTransactionManager();
    }

}
